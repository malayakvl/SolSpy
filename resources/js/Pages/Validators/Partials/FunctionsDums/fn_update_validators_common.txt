-- DDL generated by Postico 2.2.1
-- Not all database features are supported. Do not use for backup.

CREATE OR REPLACE FUNCTION data.update_validators_common(validators_json jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    _param text;
    _params text[] := ARRAY['current', 'delinquent'];
    _is_delinquent boolean;
    _validator_record jsonb;
BEGIN

    FOREACH _param IN ARRAY _params LOOP
        -- Проверяем, есть ли массив для данного параметра
        IF NOT (validators_json->'result' ? _param) THEN
            CONTINUE;
        END IF;
        
        IF jsonb_typeof(validators_json->'result'->_param) != 'array' THEN
            CONTINUE;
        END IF;

        -- Устанавливаем флаг delinquent в зависимости от типа массива
        _is_delinquent := (_param = 'delinquent');

        -- Обрабатываем каждый валидатор из массива
        FOR _validator_record IN 
            SELECT value FROM jsonb_array_elements(validators_json->'result'->_param)
        LOOP
            INSERT INTO data.validators (
                activated_stake,
                commission,
                epoch_credits,
                last_vote,
                node_pubkey,
                root_slot,
                vote_pubkey,
                delinquent,
                updated_at
            )
            VALUES (
                (_validator_record->>'activatedStake')::bigint,
                (_validator_record->>'commission')::integer,
                (_validator_record->>'epochCredits')::text,
                (_validator_record->>'lastVote')::bigint,
                _validator_record->>'nodePubkey',
                (_validator_record->>'rootSlot')::bigint,
                _validator_record->>'votePubkey',
                _is_delinquent,
                CURRENT_TIMESTAMP
            )
            ON CONFLICT (vote_pubkey, node_pubkey) DO UPDATE
            SET
                activated_stake = EXCLUDED.activated_stake,
                commission = EXCLUDED.commission,
                epoch_credits = EXCLUDED.epoch_credits,
                last_vote = EXCLUDED.last_vote,
                root_slot = EXCLUDED.root_slot,
                delinquent = EXCLUDED.delinquent,
                updated_at = EXCLUDED.updated_at;
        END LOOP;

    END LOOP;
END;
$function$
;